/*
* Escriba  una  solución  al  problema  consistente  en RETIRAR de  una  ListaEnlazada
* Simple cuya cabeza es cab1, todos aquellos elementos que se encuentren en OTRA lista
* cuya cabeza es cab2. Considere que ambas listas contienen únicamente datos numéricos
* enteros en cada nodo.
*/

// Estructuras de datos utilizadas
DEFINIR Nodo
    entero dato

    Nodo *siguiente
FIN Nodo


// Crear una estructura personalizada para representar las listas enlazadas
REGISTRO ListaEnlazada
    Nodo *cabeza
    Nodo *ultimo
FIN REGISTRO


FUNCION pedirDatos(Nodo *nodo)
    ESCRIBIR "Ingrese un numero: "
    LEER(nodo^.dato)
FIN pedirDatos


FUNCION agregarNodo(ListaEnlazada lista, Nodo *nodo)
    // Balancear nodo
    nodo^.siguiente <- NULL
    // Verificar que la lista no esté vacía
    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- nodo
    SINO
        lista.ultimo^.siguiente <- nodo
    FIN_SI
    lista.ultimo <- nodo
FIN agregarNodo


FUNCION llenarDatos(ListaEnlazada lista)
    ESCRIBIR  "LLENADO DE DATOS"
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        // Crear nuevo nodo
        Nodo *nodo
        NEW(nodo)
        SI (nodo = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatos(nodo)
            agregarNodo(lista, nodo)
        FIN_SI
        ESCRIBIR "Desea agregar otro nodo a la lista? [S/N]: "
        LEER(continuar) 
    FIN_MIENTRAS
FIN llenarDatos


FUNCION pop(ListaEnlazada lista)
    nodoBorrar <- lista.cabeza
    lista.cabeza <- lista.cabeza^.siguiente
    DELETE(nodoBorrar)
FIN pop


FUNCION detach(ListaEnlazada lista)
    Nodo *cursor

    SI (lista.cabeza <> NULL ) ENTONCES 
        cursor <- lista.cabeza

        MIENTRAS(cursor^.siguiente^.siguiente <> null) HACER
            cursor <- cursor^.siguiente
        FIN_MIENTRAS

        Nodo *nodoBorrar
        nodoBorrar <- lista.ultimo
        lista.ultimo <- cursor
        lista.ultimo^.siguiente <- null
        nodoBorrar^.siguiente <- null
        DELETE(nodoBorrar)
    FIN_SI
FIN detach


FUNCION borrarNodoMitad(ListaEnlazada lista, Nodo *nodoBorrar)
    Nodo *cursor
    cursor <- lista.cabeza^.siguiente

    MIENTRAS (cursor^.siguiente^.siguiente <> NULL) AND (cursor^.siguiente <> nodoBorrar) HACER
        cursor <- cursor^.siguiente
    FIN_MIENTRAS

    SI (cursor^.siguiente = nodoBorrar) HACER
        nodoBorrar <- cursor^.siguiente
        cursor^.siguiente <- nodoBorrar^.siguiente
        nodoBorrar^.siguiente <- NULL
        DELETE(nodoBorrar)
    FIN_SI
FIN borrarNodoMitad


FUNCION borrarNodo(ListaEnlazada lista, Nodo *nodoBorrar)
    SI (nodoBorrar = lista.cabeza) ENTONCES
        pop(lista)
    SINO
        SI (nodoBorrar = lista.ultimo) ENTONCES
            detach(lista)
        SINO
            borrarNodoMitad(lista, nodoBorrar)
        FIN_SI
    FIN_SI
FIN borrarNodo


FUNCION diferenciarListas(ListaEnlazada listaA, ListaEnlazada listaB)
    Nodo *cursorA, *cursorB

    cursorB <- listaB.cabeza

    MIENTRAS (cursorB <> NULL) HACER
        cursorA <- listaA.cabeza
        MIENTRAS(cursorA <> NULL) HACER
            siguienteAux <- cursorA.siguiente
            SI (cursorA^.dato = cursorB^.dato) ENTONCES
                borrarNodo(listaA, cursorA)
            FIN_SI
            cursorA <- siguienteAux
        FIN_MIENTRAS
        cursorB <- cursorB^.siguiente
    FIN_MIENTRAS

FIN diferenciarListas


FUNCION mostrarLista(ListaEnlazada lista)
    Nodo *cursor
    cursor <- lista.cabeza
    MIENTRAS (cursor <> NULL) HACER
        ESCRIBIR cursor^.dato, " -> "
        cursor <- cursor^.siguiente
    FIN_MIENTRAS

    ESCRIBIR "NULL"
FIN mostrarLista


PROGRAMA_PRINCIPAL
    ListaEnlazada lista1
    ListaEnlazada lista2

    ESCRIBIR  "LLENADO DE DATOS LISTA 1"
    llenarDatos(lista1)
    ESCRIBIR  "-------------------------"
    ESCRIBIR  "LLENADO DE DATOS LISTA 2"
    llenarDatos(lista2)

    ESCRIBIR "Lista 1 original"
    mostrarLista(lista1)
    ESCRIBIR "Lista 2"
    mostrarLista(lista2)

    diferenciarListas(lista1, lista2)
    ESCRIBIR "Lista 1 retirando elementos iguales."
    mostrarLista(lista1)
FIN PROGRAMA_PRINCIPAL

