/*
* ESCRIBA UNA SOLUCIÓN AL PROBLEMA CONSISTENTE EN ACTUALIZAR UN CAMPO DE INFORMACIÓN DE
* UNA LISTA ENLAZADA SIMPLE BASADO EN LOS DATOS DE OTRA LISTA IGUALMENTE ENLAZADA SIMPLE.
* (a esta actividad se le denomina CRUZAR las listas).
*/

DEFINIR Persona
    char[40] id
    char[40] nombre

    Persona *siguiente
FIN Persona

DEFINIR Notas
    char[40] id
    double[3] notas

    Notas *siguiente
FIN Notas

DEFINIR Estudiante
    char[40] id
    char[40] nombre
    double[3] notas
    double promedio

    Estudiante *siguiente
FIN Estudiante

REGISTRO ListaPersonas
    Persona *cabeza
    Persona *ultimo
FIN REGISTRO

REGISTRO ListaNotas
    Notas *cabeza
    Notas *ultimo
FIN REGISTRO

REGISTRO ListaEstudiantes
    Estudiante *cabeza
    Estudiante *ultimo
FIN REGISTRO


FUNCION agregarPersona(ListaPersonas lista, Persona *persona)
    persona^.anterior <- NULL
    persona^.siguiente <- NULL

    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- persona
    SINO
        lista.ultimo^.siguiente <- persona
        persona^.anterior <- lista^.ultimo
    FIN_SI
    lista.ultimo <- persona
FIN agregarPersona


FUNCION pedirDatosPersona(Persona *persona)
    repetido <- false

    ESCRIBIR "REGISTRAR PERSONA"
    ESCRIBIR "Ingrese el id: "
    LEER(persona^.id)
    Persona *persona <- 
    MIENTRAS () HACER

    FIN_MIENTRAS

FIN pedirDatosPersona


FUNCION registrarPersona(ListaPersonas lista)
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        // Crear nuevo nodo
        Persona *persona
        NEW(persona)
        SI (persona = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatosPersona(persona)
            agregarPersona(lista, persona)
        FIN_SI
        ESCRIBIR "Desea agregar otra persona a la lista? [S/N]: "
        LEER(continuar) 
    FIN_MIENTRAS
FIN registrarPersona


FUNCION agregarNotas(ListaNotas lista, Notas *notas)
    notas^.anterior <- NULL
    notas^.siguiente <- NULL

    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- notas
    SINO
        lista.ultimo^.siguiente <- notas
        notas^.anterior <- lista^.ultimo
    FIN_SI
    lista.ultimo <- notas
FIN agregarNotas


FUNCION registrarNotas(ListaNotas lista)
    ESCRIBIR "LLENADO DE DATOS"
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        Notas *notas
        NEW(notas)
        SI (notas = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatosNotas(notas)
            agregarNotas(lista, notas)
        FIN_SI
        ESCRIBIR "Desea agregar otra nota a la lista? [S/N]: "
        LEER(continuar) 
    FIN_MIENTRAS
FIN registrarNotas


FUNCION agregarEstudiante(ListaEstudiantes lista, Estudiante *estudiante)
    estudiante^.anterior <- NULL
    estudiante^.siguiente <- NULL

    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- estudiante
    SINO
        lista.ultimo^.siguiente <- estudiante
        estudiante^.anterior <- lista^.ultimo
    FIN_SI
    lista.ultimo <- estudiante
FIN agregarEstudiante


FUNCION calcularPromedio(Estudiante estudiante)
    double promedio <- estudiante^.notas[0] * 0.3
    promedio <- promedio + estudiante^.notas[1] * 0.3
    promedio <- promedio + estudiante^.notas[2] * 0.4

    RETORNAR promedio
FIN calcularPromedio


FUNCION generarEstudiante(Persona *persona, Notas *notas)
    Estudiante *estudiante
    NEW(estudiante)

    estudiante^.id <- persona^.id
    estudiante^.nombre <- persona^.nombre
    estudiante^.notas <- notas^.notas
    estudiante^.promedio <- calcularPromedio(estudiante)

    RETORNAR estudiante
FIN generarEstudiante

FUNCION cruzarListas(ListaPersonas listaPersonas, ListaNotas listaNotas)
    ListaEstudiantes listaEstudiantes
    Persona *cursorP
    Notas *cursorN

    cursorP <- listaPersonas.cabeza

    MIENTRAS (cursorP <> NULL) HACER
        cursorN <- listaNotas.cabeza
        MIENTRAS(cursorN <> NULL) HACER
            SI (cursorN^.id = cursorP^.id) ENTONCES
                Estudiante *estudiante <- generarEstudiante(cursorP, cursorN)
                agregarEstudiante(listaEstudiantes, estudiante)
            FIN_SI
            cursorN <- cursorN.siguiente
        FIN_MIENTRAS
        cursorP <- cursorP^.siguiente
    FIN_MIENTRAS
 
    RETORNAR listaEstudiantes
FIN cruzarListas


FUNCION mostrarEstudiante(Estudiante estudiante)
    ESCRIBIR "---------------------"
    ESCRIBIR "ESTUDIANTE"
    ESCRIBIR "Id: ", estudiante^.id
    ESCRIBIR "Nombre: ", estudiante^.nombre
    ESCRIBIR "Notas: ", estudiante^.notas
    ESCRIBIR "Promedio: ", estudiante^.promedio
FIN mostrarEstudiante


FUNCION mostrarEstudiantes(ListaEnlazada lista)
    Nodo *cursor
    cursor <- lista.cabeza
    MIENTRAS (cursor <> NULL) HACER
        mostrarEstudiante(cursor)
        cursor <- cursor^.siguiente
    FIN_MIENTRAS

    ESCRIBIR "NULL"
FIN mostrarEstudiantes


PROGRAMA_PRINCIPAL
    ListaPersonas listaPersonas
    ListaNotas listaNotas

    registrarPersona(listaPersonas)
    ESCRIBIR "---------------------"
    registrarNotas(listaNotas)

    ListaEstudiantes listaEstudiantes <- cruzarListas(listaPersonas, listaNotas)
    mostrarEstudiantes(listaEstudiantes)
FIN PROGRAMA_PRINCIPAL