/*
* SE TIENE UNA LISTA ENLAZADA DOBLE CUYO ÚNICO CAMPO DE INFORMACIÓN ES UN DATO DE TIPO
* ENTERO CORTO. CONSTRUYA USTED UNA SOLUCIÓN ALGORÍTMICA QUE PERMÍTA RETIRAR DE DICHA
* LISTA AQUELLOS NODOS QUE CONTENGAN NÚMEROS PARES, E INSERTAR DICHOS VALORES EN ORDEN
* ASCENDENTE EN OTRA LISTA ENLAZADA DOBLE, SIN DUPLICADOS. 
*/

// Estructuras de datos utilizadas
DEFINIR Nodo
    entero corto dato

    Nodo *siguiente
    Nodo *anterior
FIN Nodo

// Crear una estructura personalizada para representar las listas enlazadas
REGISTRO ListaEnlazada
    Nodo *cabeza
    Nodo *ultimo
FIN REGISTRO


FUNCION insercionOrdenada(ListaEnlazada lista, Nodo *nodo)
    SI (nodo^.dato < lista.cabeza^.dato) ENTONCES
        nodo^.siguiente <- lista.cabeza
        lista.cabeza^.antes <- nodo
        lista.cabeza <- nodo
    SINO
        SI (nodo^.dato > lista.ultimo^.dato) ENTONCES
            lista.ultimo^.siguiente <- nodo
            nodo^.anterior <- lista.ultimo
            lista.ultimo <- nodo
        SINO
            Nodo *cursor <- lista.cabeza
            MIENTRAS (cursor^.siguiente != NULL) AND (nodo^.dato >= cursor^.dato) HACER
                cursor <- cursor^.siguiente
            FIN_MIENTRAS
            nodo^.anterior <- cursor^.anterior
            nodo^.anterior^.siguiente <- nodo
            nodo^.siguiente <- cursor
            cursor^.anterior <- nodo
        FIN_SI
    FIN_SI
FIN insercionOrdenada


FUNCION insercionUnica(ListaEnlazada lista, Nodo *nodo)
    Nodo *cursor <- lista.cabeza
    repetido <- false

    MIENTRAS (cursor^.siguiente <> NULL) AND (repetido = false) ENTONCES
        SI (nodo^.dato = cursor^.dato) ENTONCES
            repetido <- true
            DELETE(nodo)
        SINO
            insercionOrdenada(lista, nodo)
        FIN_SI
    FIN_MIENTRAS
FIN insercionUnica


FUNCION pedirDatos(Nodo *nodo)
    ESCRIBIR "Ingrese un numero: "
    LEER(nodo^.dato)
FIN pedirDatos


FUNCION llenarDatos(ListaEnlazada lista)
    ESCRIBIR  "LLENADO DE DATOS"
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        // Crear nuevo nodo
        Nodo *nodo
        NEW(nodo)
        SI (nodo = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatos(nodo)
            insercionOrdenada(lista, nodo)
            ESCRIBIR "Desea agregar otro nodo a la lista? [S/N]: "
            LEER(continuar)
        FIN_SI
    FIN_MIENTRAS
FIN llenarDatos


FUNCION moverCabeza(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.cabeza
    base.cabeza <- base.cabeza^.siguiente
    base.cabeza^.anterior <- NULL
    insercionUnica(objetivo, nodoMover)
FIN moverCabeza


FUNCION moverUltimo(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.ultimo
    base.ultimo <- base.ultimo^.anterior
    base.ultimo^.siguiente <- NULL
    insercionUnica(objetivo, nodoMover)
FIN moverUltimo


FUNCION moverNodo(Nodo *nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    nodoMover^.anterior^.siguiente <- nodoMover^.siguiente
    nodoMover^.siguiente^.anterior <- nodoMover^.anterior
    insercionUnica(objetivo, nodoMover)
FIN moverNodo


FUNCION mover(Nodo *nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    SI (nodoMover = base.cabeza) ENTONCES
        moverCabeza(base, objetivo)
    SINO
        SI (nodoMover = base.ultimo) ENTONCES
            moverUltimo(base, objetivo)
        SINO
            moverNodo(nodoMover, base, objetivo)
        FIN_SI
    FIN_SI
FIN mover


FUNCION moverDatosPares(ListaEnlazada lista, ListaEnlazada objetivo)
    Nodo *cursor <- lista.cabeza

    MIENTRAS (cursor <> NULL) HACER
        Nodo *siguienteAux <- cursor^.siguiente
        SI (cursor^.dato MOD 2 = 0) ENTONCES
            mover(cursor, lista, objetivo)
        FIN_SI
        cursor <- siguienteAux
    FIN_MIENTRAS
FIN moverDatosPares


FUNCION mostrarLista(ListaEnlazada lista)
    Nodo *cursor
    cursor <- lista.cabeza
    ESCRIBIR "NULL <- "
    MIENTRAS (cursor <> NULL) HACER
        ESCRIBIR cursor^.dato, " <-> "
        cursor <- cursor^.siguiente
    FIN_MIENTRAS

    ESCRIBIR " -> NULL"
FIN mostrarLista


PROGRAMA_PRINCIPAL
    ListaEnlazada listaOriginal
    ListaEnlazada listaPares

    ESCRIBIR  "LLENADO DE DATOS LISTA 1"
    llenarDatos(listaOriginal)

    ESCRIBIR  "-------------------------"
    ESCRIBIR  "Lista original"
    mostrarLista(listaOriginal)
 
    ESCRIBIR  "-------------------------"
    moverDatosPares(listaOriginal, listaPares)
    ESCRIBIR  "Lista original sin valores pares"
    mostrarLista(listaOriginal)
    ESCRIBIR  "Lista con los valores pares"
    mostrarLista(listaPares)
FIN PROGRAMA_PRINCIPAL
