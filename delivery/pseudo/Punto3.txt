/*
* SE TIENE UNA LISTA ENLAZADA DOBLE CUYO ÚNICO CAMPO DE INFORMACIÓN ES UN DATO DE TIPO
* String [40] (NOMBRE). ESCRIBA UNA SOLUCIÓN ALGORÍTMICA PARA BORRAR UN NOMBRE DE LA
* LISTA, IMPLEMENTANDO ADEMÁS UNA "Papelera" de RECICLAJE que permita, a petición del
* Usuario "Recuperar" un nombre BORRADO.
*/

// Estructuras de datos utilizadas
DEFINIR Nodo
    char[40] nombre

    Nodo *siguiente
    Nodo *anterior
FIN Nodo

// Crear una estructura personalizada para representar las listas enlazadas
REGISTRO ListaEnlazada
    Nodo *cabeza
    Nodo *ultimo
FIN REGISTRO


// Llenar los campos de un nodo dado
FUNCION pedirDatos(Nodo persona)
    ESCRIBIR "Introduzca el nombre: "
    LEER(persona^.nombre)
FIN pedirDatos


// Append nodo O(1)
FUNCION agregarNodo(ListaEnlazada lista, Nodo persona)
    persona^.anterior <- NULL
    persona^.siguiente <- NULL

    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- persona
        lista.ultimo <- persona
    SINO
        lista.ultimo^.siguiente <- persona
        persona^.anterior <- lista^.ultimo
        lista.ultimo <- persona
    FIN_SI
FIN agregarNodo


FUNCION registrarPersona(ListaEnlazada lista)
    ESCRIBIR "REGISTRAR NOMBRE"
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        // Crear nuevo nodo
        Nodo *persona
        NEW(persona)
        SI (persona = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatos(persona)
            agregarNodo(lista, persona)
            ESCRIBIR "Desea agregar otro registro de persona a la lista? [S/N]: "
            LEER(continuar) 
        FIN_SI
    FIN_MIENTRAS
FIN registrarPersona


FUNCION buscarNodoPorNombre(ListaEnlazada lista, char[] nombre)
    encontrado <- false
    Nodo *cursor <- lista.cabeza
    Nodo *personaEncontrada # NULL
    
    MIENTRAS (cursor <> NULL) AND (encontrado = false) HACER
        SI (cursor^.nombre = nombre) ENTONCES
            personaEncontrada <- cursor
            encontrado <- true
        SINO
            cursor <- cursor^.siguiente
        FIN_SI
    FIN_MIENTRAS

    RETORNAR personaEncontrada
FIN buscarNodoPorNombre


FUNCION moverCabeza(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.cabeza
    base.cabeza <- base.cabeza^.siguiente
    agregarNodo(objetivo, nodoMover)
FIN moverCabeza


FUNCION moverUltimo(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.ultimo
    base.ultimo <- base.ultimo^.anterior
    agregarNodo(objetivo, nodoMover)
FIN moverUltimo


FUNCION moverNodo(Nodo nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    nodoMover^.anterior^.siguiente <- nodoMover^.siguiente
    nodoMover^.siguiente^.anterior <- nodoMover^.siguiente
    agregarNodo(objetivo, nodoMover)
FIN moverNodo


FUNCION mover(Nodo nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    SI (nodoMover = base.cabeza) ENTONCES
        moverCabeza(base, objetivo)
    SINO
        SI (nodoMover = base.ultimo) ENTONCES
            moverUltimo(base, objetivo)
        SINO
            moverNodo(nodoMover, base, objetivo)
        FIN_SI
    FIN_SI
FIN mover


FUNCION trasladarPersona(char[] accion, ListaEnlazada lista, ListaEnlazada objetivo)
    continuar <- "s"

    SI (lista.cabeza = NULL) ENTONCES
        ESCRIBIR "La lista está vacía."
        RETORNAR
    FIN_SI

    MIENTRAS (continuar = "s") HACER
        ESCRIBIR "Nombre que desea ", accion, ": "
        LEER(nombre)

        Nodo *nodoMover <- buscarNodoPorNombre(lista, nombre)

        SI (nodoMover = NULL) ENTONCES
            ESCRIBIR "Nombre no encontrado en la lista."
        SINO
            ESCRIBIR "Seguro que desea ", accion, " el nombre [S/N]: "
            LEER(seguro)
            SI (seguro = "s") ENTONCES
                mover(nodoMover, lista, objetivo)
            SINO
                ESCRIBIR "Acción de ", accion, " cancelada."
            FIN_SI
        FIN_SI
        
        ESCRIBIR "Desea ", accion, " otro nombre? [S/N]: "
        LEER(continuar)
    FIN_MIENTRAS
FIN trasladarPersona


PROGRAMA_PRINCIPAL
    ListaEnlazada listaPersonas
    // Crear una lista para guardar los personas borradas
    ListaEnlazada papelera

    registrarPersona(listaPersonas)
    trasladarPersona("borrar", listaPersonas, papelera)

    ESCRIBIR ("Desea recuperar un nombre borrado [S/N]: ")
    LEER(recuperar)
    SI (recuperar = "s") ENTONCES
        trasladarPersona("recuperar", papelera, listaPersonas)
    FIN_SI
FIN PROGRAMA_PRINCIPAL
