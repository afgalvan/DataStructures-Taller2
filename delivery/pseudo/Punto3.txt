/*
* SE TIENE UNA LISTA ENLAZADA DOBLE CUYO ÚNICO CAMPO DE INFORMACIÓN ES UN DATO DE TIPO
* String [40] (NOMBRE). ESCRIBA UNA SOLUCIÓN ALGORÍTMICA PARA BORRAR UN NOMBRE DE LA
* LISTA, IMPLEMENTANDO ADEMÁS UNA "Papelera" de RECICLAJE que permita, a petición del
* Usuario "Recuperar" un nombre BORRADO.
*/

// Estructuras de datos utilizadas
DEFINIR Nodo
    char[40] nombre

    Nodo *siguiente
    Nodo *anterior
FIN Nodo

// Crear una estructura nombrelizada para representar las listas enlazadas
REGISTRO ListaEnlazada
    Nodo *cabeza
    Nodo *ultimo
FIN REGISTRO


// Llenar los campos de un nodo dado
FUNCION pedirDatos(Nodo nombre)
    ESCRIBIR "Introduzca el nombre: "
    LEER(nombre^.nombre)
FIN pedirDatos


// Append nodo O(1)
FUNCION agregarNodo(ListaEnlazada lista, Nodo *nombre)
    nombre^.anterior <- NULL
    nombre^.siguiente <- NULL

    SI (lista.cabeza = NULL) ENTONCES
        lista.cabeza <- nombre
    SINO
        lista.ultimo^.siguiente <- nombre
        nombre^.anterior <- lista^.ultimo
    FIN_SI
    lista.ultimo <- nombre
FIN agregarNodo


FUNCION registrarNombre(ListaEnlazada lista)
    continuar <- "s"

    MIENTRAS (continuar = "s") HACER
        // Crear nuevo nodo
        Nodo *nombre
        NEW(nombre)
        SI (nombre = NULL) ENTONCES
            ESCRIBIR "No hay memoria disponible en el sistema"
        SINO
            pedirDatos(nombre)
            agregarNodo(lista, nombre)
            ESCRIBIR "Desea agregar otro registro de nombre a la lista? [S/N]: "
            LEER(continuar) 
        FIN_SI
    FIN_MIENTRAS
FIN registrarNombre


FUNCION buscarNodoPorNombre(ListaEnlazada lista, char[] nombre)
    encontrado <- false
    Nodo *cursor <- lista.cabeza
    Nodo *nombreEncontrada # NULL
    
    MIENTRAS (cursor <> NULL) AND (encontrado = false) HACER
        SI (cursor^.nombre = nombre) ENTONCES
            nombreEncontrada <- cursor
            encontrado <- true
        SINO
            cursor <- cursor^.siguiente
        FIN_SI
    FIN_MIENTRAS

    RETORNAR nombreEncontrada
FIN buscarNodoPorNombre


FUNCION moverCabeza(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.cabeza
    base.cabeza <- base.cabeza^.siguiente
    agregarNodo(objetivo, nodoMover)
FIN moverCabeza


FUNCION moverUltimo(ListaEnlazada base, ListaEnlazada objetivo)
    Nodo *nodoMover <- base.ultimo
    base.ultimo <- base.ultimo^.anterior
    agregarNodo(objetivo, nodoMover)
FIN moverUltimo


FUNCION moverNodo(Nodo *nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    nodoMover^.anterior^.siguiente <- nodoMover^.siguiente
    nodoMover^.siguiente^.anterior <- nodoMover^.siguiente
    agregarNodo(objetivo, nodoMover)
FIN moverNodo


FUNCION mover(Nodo *nodoMover, ListaEnlazada base, ListaEnlazada objetivo)
    SI (nodoMover = base.cabeza) ENTONCES
        moverCabeza(base, objetivo)
    SINO
        SI (nodoMover = base.ultimo) ENTONCES
            moverUltimo(base, objetivo)
        SINO
            moverNodo(nodoMover, base, objetivo)
        FIN_SI
    FIN_SI
FIN mover


FUNCION trasladarNombre(char[] accion, ListaEnlazada lista, ListaEnlazada objetivo)
    continuar <- "s"

    SI (lista.cabeza = NULL) ENTONCES
        ESCRIBIR "La lista está vacía."
        RETORNAR
    FIN_SI

    MIENTRAS (continuar = "s") HACER
        ESCRIBIR "Nombre que desea ", accion, ": "
        LEER(nombre)

        Nodo *nodoMover <- buscarNodoPorNombre(lista, nombre)

        SI (nodoMover = NULL) ENTONCES
            ESCRIBIR "Nombre no encontrado en la lista."
        SINO
            ESCRIBIR "Seguro que desea ", accion, " el nombre [S/N]: "
            LEER(seguro)
            SI (seguro = "s") ENTONCES
                mover(nodoMover, lista, objetivo)
            SINO
                ESCRIBIR "Acción de ", accion, " cancelada."
            FIN_SI
        FIN_SI
        
        ESCRIBIR "Desea ", accion, " otro nombre? [S/N]: "
        LEER(continuar)
    FIN_MIENTRAS
FIN trasladarNombre


FUNCION mostrarLista(ListaEnlazada lista)
    Nodo *cursor
    cursor <- lista.cabeza
    ESCRIBIR "NULL <- "
    MIENTRAS (cursor <> NULL) HACER
        ESCRIBIR cursor^.dato, " <-> "
        cursor <- cursor^.siguiente
    FIN_MIENTRAS

    ESCRIBIR " -> NULL"
FIN mostrarLista


PROGRAMA_PRINCIPAL
    ListaEnlazada listaNombres
    // Crear una lista para guardar los nombres borradas
    ListaEnlazada papelera

    ESCRIBIR  "Llenar lista de nombres"
    registrarNombre(listaNombres)
    
    ESCRIBIR  "-------------------------"
    ESCRIBIR  "Lista de nombres"
    mostrarLista(listaNombres)

    ESCRIBIR  "-------------------------"
    ESCRIBIR  "Borrar nombres"
    trasladarNombre("borrar", listaNombres, papelera)
    ESCRIBIR  "Lista de nombres"
    mostrarLista(listaNombres)
    ESCRIBIR  "Papelera"
    mostrarLista(papelera)

    ESCRIBIR  "-------------------------"
    ESCRIBIR  "Recuperar nombres"
    trasladarNombre("recuperar", papelera, listaNombres)
    ESCRIBIR  "Lista de nombres"
    mostrarLista(listaNombres)
    ESCRIBIR  "Papelera"
    mostrarLista(papelera)
FIN PROGRAMA_PRINCIPAL
